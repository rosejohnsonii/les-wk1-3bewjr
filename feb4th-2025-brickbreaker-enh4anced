// brick breaker enhanced. I have made a game with the assistance of AI. 
//To create and enhanced brick breaker game. this game also provides a cheat code.

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Brick Breaker Game</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      background-color: #000;
    }
    canvas {
      background-color: #111;
      display: block;
    }
  </style>
</head>
<body>
  <canvas id="gameCanvas" width="480" height="320"></canvas>
  <script>
    const canvas = document.getElementById("gameCanvas");
    const ctx = canvas.getContext("2d");

    // Game Variables
    let level = 1;
    let score = 0;
    let lives = 3;

    // Paddle
    const paddleWidth = 75;
    const paddleHeight = 10;
    let paddleX = (canvas.width - paddleWidth) / 2;

    // Ball
    const ballRadius = 10;
    let ballX = canvas.width / 2;
    let ballY = canvas.height - 30;
    let ballDX = 4;
    let ballDY = -4;

    // Bricks
    const brickRowCount = 3;
    const brickColumnCount = 5;
    const brickWidth = 75;
    const brickHeight = 20;
    const brickPadding = 10;
    const brickOffsetTop = 30;
    const brickOffsetLeft = 30;
    let bricks = [];

    // Power-Up
    let powerUpActive = false;
    let powerUpType = null;

    // Initialize Bricks
    function initializeBricks() {
      bricks = [];
      for (let c = 0; c < brickColumnCount; c++) {
        bricks[c] = [];
        for (let r = 0; r < brickRowCount + level - 1; r++) {
          bricks[c][r] = { x: 0, y: 0, status: 1 };
        }
      }
    }

    // Draw Paddle
    function drawPaddle() {
      ctx.beginPath();
      ctx.rect(paddleX, canvas.height - paddleHeight, paddleWidth, paddleHeight);
      ctx.fillStyle = "#0095DD";
      ctx.fill();
      ctx.closePath();
    }

    // Draw Ball
    function drawBall() {
      ctx.beginPath();
      ctx.arc(ballX, ballY, ballRadius, 0, Math.PI * 2);
      ctx.fillStyle = powerUpActive ? "#FFD700" : "#0095DD";
      ctx.fill();
      ctx.closePath();
    }

    // Draw Bricks
    function drawBricks() {
      for (let c = 0; c < bricks.length; c++) {
        for (let r = 0; r < bricks[c].length; r++) {
          if (bricks[c][r].status === 1) {
            let brickX = c * (brickWidth + brickPadding) + brickOffsetLeft;
            let brickY = r * (brickHeight + brickPadding) + brickOffsetTop;
            bricks[c][r].x = brickX;
            bricks[c][r].y = brickY;
            ctx.beginPath();
            ctx.rect(brickX, brickY, brickWidth, brickHeight);
            ctx.fillStyle = "#0095DD";
            ctx.fill();
            ctx.closePath();
          }
        }
      }
    }

    // Collision Detection
    function collisionDetection() {
      for (let c = 0; c < bricks.length; c++) {
        for (let r = 0; r < bricks[c].length; r++) {
          let b = bricks[c][r];
          if (b.status === 1) {
            if (
              ballX > b.x &&
              ballX < b.x + brickWidth &&
              ballY > b.y &&
              ballY < b.y + brickHeight
            ) {
              ballDY = -ballDY;
              b.status = 0;
              score++;
              if (score % 5 === 0) {
                activatePowerUp();
              }
              if (score === bricks.length * bricks[0].length) {
                level++;
                initializeBricks();
                ballX = canvas.width / 2;
                ballY = canvas.height - 30;
                ballDX = 4;
                ballDY = -4;
              }
            }
          }
        }
      }
    }

    // Activate Power-Up
    function activatePowerUp() {
      powerUpActive = true;
      powerUpType = "bigPaddle";
      paddleWidth = 150;
      setTimeout(() => {
        powerUpActive = false;
        powerUpType = null;
        paddleWidth = 75;
      }, 5000); // Power-up lasts 5 seconds
    }

    // Draw Score, Lives, and Level
    function drawStats() {
      ctx.font = "16px Arial";
      ctx.fillStyle = "#0095DD";
      ctx.fillText("Score: " + score, 8, 20);
      ctx.fillText("Lives: " + lives, canvas.width - 80, 20);
      ctx.fillText("Level: " + level, canvas.width / 2 - 30, 20);
    }

    // Draw Everything
    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      drawBricks();
      drawBall();
      drawPaddle();
      drawStats();
      collisionDetection();

      // Ball Movement
      if (ballX + ballDX > canvas.width - ballRadius || ballX + ballDX < ballRadius) {
        ballDX = -ballDX;
      }
      if (ballY + ballDY < ballRadius) {
        ballDY = -ballDY;
      } else if (ballY + ballDY > canvas.height - ballRadius) {
        if (ballX > paddleX && ballX < paddleX + paddleWidth) {
          ballDY = -ballDY;
        } else {
          lives--;
          if (lives === 0) {
            alert("GAME OVER");
            document.location.reload();
          } else {
            ballX = canvas.width / 2;
            ballY = canvas.height - 30;
            ballDX = 4;
            ballDY = -4;
          }
        }
      }

      ballX += ballDX;
      ballY += ballDY;

      // Paddle Movement
      if (rightPressed && paddleX < canvas.width - paddleWidth) {
        paddleX += 7;
      } else if (leftPressed && paddleX > 0) {
        paddleX -= 7;
      }

      requestAnimationFrame(draw);
    }

    // Keyboard Controls
    let rightPressed = false;
    let leftPressed = false;
    document.addEventListener("keydown", keyDownHandler);
    document.addEventListener("keyup", keyUpHandler);

    function keyDownHandler(e) {
      if (e.key === "Right" || e.key === "ArrowRight") {
        rightPressed = true;
      } else if (e.key === "Left" || e.key === "ArrowLeft") {
        leftPressed = true;
      } else if (e.key === "4") {
        // Cheat Code: Destroy all bricks
        for (let c = 0; c < bricks.length; c++) {
          for (let r = 0; r < bricks[c].length; r++) {
            bricks[c][r].status = 0;
          }
        }
        score = bricks.length * bricks[0].length;
      }
    }

    function keyUpHandler(e) {
      if (e.key === "Right" || e.key === "ArrowRight") {
        rightPressed = false;
      } else if (e.key === "Left" || e.key === "ArrowLeft") {
        leftPressed = false;
      }
    }

    // Start Game
    initializeBricks();
    draw();
  </script>
</body>
</html>
